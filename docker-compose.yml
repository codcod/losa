services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: losa_postgres
    environment:
      POSTGRES_DB: losa
      POSTGRES_USER: losa_user
      POSTGRES_PASSWORD: losa_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - losa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U losa_user -d losa"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: losa_redis
    command: redis-server --requirepass losa_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - losa_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # LOSA Application
  losa:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: losa_app
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: losa
      DB_USER: losa_user
      DB_PASSWORD: losa_password
      DB_SSL_MODE: disable

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: losa_redis_password

      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: false
      RELOAD: false
      ENVIRONMENT: production

      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      OPENAI_MODEL: gpt-4
      OPENAI_TEMPERATURE: 0.1

      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your_jwt_secret_key_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your_32_character_encryption_key}

      # File Upload
      UPLOAD_DIRECTORY: /app/uploads
      MAX_FILE_SIZE: 10485760

      # Logging
      LOG_LEVEL: INFO
      LOG_FILE: /app/logs/losa.log
      STRUCTURED_LOGGING: true

      # Feature Flags
      ENABLE_ASYNC_PROCESSING: true
      ENABLE_DOCUMENT_ANALYSIS: true
      ENABLE_AUTOMATED_DECISIONS: true
      MOCK_CREDIT_BUREAU: true
      MOCK_OCR_SERVICE: true

      # CORS
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080"
      TRUSTED_HOSTS: "localhost,127.0.0.1"
    ports:
      - "8000:8000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - losa_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Development LOSA Application (with hot reload)
  losa-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: losa_app_dev
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: losa
      DB_USER: losa_user
      DB_PASSWORD: losa_password
      DB_SSL_MODE: disable

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: losa_redis_password

      # Development Configuration
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: true
      RELOAD: true
      ENVIRONMENT: development

      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      OPENAI_MODEL: gpt-4
      OPENAI_TEMPERATURE: 0.1

      # Development Features
      MOCK_CREDIT_BUREAU: true
      MOCK_OCR_SERVICE: true
      MOCK_EMAIL_SERVICE: true

      # Logging
      LOG_LEVEL: DEBUG
      LOG_FILE: /app/logs/losa_dev.log

      # CORS (more permissive for development)
      ALLOWED_ORIGINS: "*"
    ports:
      - "8001:8000"
    volumes:
      - ./src:/app/src
      - ./examples:/app/examples
      - ./tests:/app/tests
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - losa_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "losa.main"]
    profiles:
      - dev

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: losa_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - losa_network
    depends_on:
      - losa
    profiles:
      - production

  # Adminer (Database Administration)
  adminer:
    image: adminer:latest
    container_name: losa_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - losa_network
    depends_on:
      - postgres
    profiles:
      - tools

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: losa_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - losa_network
    profiles:
      - monitoring

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: losa_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - losa_network
    profiles:
      - monitoring

  # Mail Server (for testing email functionality)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: losa_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - losa_network
    profiles:
      - dev

# Networks
networks:
  losa_network:
    driver: bridge
    name: losa_network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: losa_postgres_data

  redis_data:
    driver: local
    name: losa_redis_data

  uploads_data:
    driver: local
    name: losa_uploads_data

  logs_data:
    driver: local
    name: losa_logs_data

  nginx_logs:
    driver: local
    name: losa_nginx_logs

  grafana_data:
    driver: local
    name: losa_grafana_data

  prometheus_data:
    driver: local
    name: losa_prometheus_data
